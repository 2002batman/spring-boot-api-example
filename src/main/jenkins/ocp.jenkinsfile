def templateName = 'spring-boot-api'

pipeline {
	agent any
   options {
        // set a timeout of 20 minutes for this pipeline
        timeout(time: 20, unit: 'MINUTES')
    }
    
    stages {
        stage ( 'preamble' ) {
        	steps {
        	    script {
        	        openshift.withCluster () {
        	        	openshift.withProject() {
        	        	    echo "using project: ${openshift.project()}"
    	        	    }
    	        	}
				}
    	    }
    	}
    	
		stage('cleanup') {
			steps {
				script {
					openshift.withCluster() {
						openshift.withProject() {
							openshift.selector("all", [ template : templateName ]).delete() 
							if (openshift.selector("secrets", templateName).exists()) { 
								openshift.selector("secrets", templateName).delete()
							}
						}
					}
				}
			}
		}
		
		stage('create') {
			when {
				expression {
					openshift.withCluster() {
						return !openshift.selector ( 'bc', templateName ).exists();
	      			}
	    		}
	  		}
	  		
			steps {
				script {
					openshift.withCluster() {
						openshift.withProject() {
							openshift.newApp(templatePath) 
						}
					}
				}
			}
		}	
    }
}